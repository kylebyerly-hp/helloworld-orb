# CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@4.0.1
  aws-cli: circleci/aws-cli@0.1.13

jobs:
  ctrz:
    executor: aws-ecr/default
    steps:
      - checkout
      - run:
          name: "Set org and repo vars"
          command: |
            org_repo=$(git config --local remote.origin.url | sed -e 's/\.git$//' -e 's,//[^/]*/,,g' -e 's,.*:,,' -e 's#/$##' | tr '[:upper:]' '[:lower:]')
            echo "export ORG_REPO='$org_repo'" >> $BASH_ENV
      - run:
          name: "Echo org"
          command: echo "$ORG_REPO"
      - aws-ecr/build-and-push-image:
          create-repo: true
          repo: $ORG_REPO
  apply_read_permissions:
    executor: aws-cli/default
    steps:
      - run:
          name: "Apply read-only permissions for accounts"
          command: |
            if [ -n "$TARGET_ACCOUNTS" ]; then
                echo "Begin validation/correction of aws ecr policy of $repo for $TARGET_ACCOUNTS" 1>&2
              else
                echo "No TARGET_ACCOUNTS to apply ECR policy" 1>&2
              fi

              TARGET_ACCOUNT
              for TARGET_ACCOUNT in ${TARGET_ACCOUNTS/,/ }; do
                ARN_STRING="arn:aws:iam::$TARGET_ACCOUNT:root"
                NEW_POLICY=$(echo "
                {
                  \"Sid\": \"$TARGET_ACCOUNT\",
                  \"Effect\": \"Allow\",
                  \"Principal\": {
                    \"AWS\": \"arn:aws:iam::$TARGET_ACCOUNT:root\"
                  },
                  \"Action\": [
                    \"ecr:GetDownloadUrlForLayer\",
                    \"ecr:BatchGetImage\",
                    \"ecr:BatchCheckLayerAvailability\",
                    \"ecr:ListImages\",
                    \"ecr:DescribeRepositories\",
                    \"ecr:DescribeImages\"
                  ]
                }")

                CURRENT_POLICY=$( aws ecr get-repository-policy --output json --repository-name $repo 2>&1 || true )
                NON_EXISTENT=$( echo $CURRENT_POLICY | grep -c RepositoryPolicyNotFoundException 2>&1 || true )
                if [ $NON_EXISTENT -gt 0 ] ; then
                  echo "Repository $repo has no policy currently set" 1>&2
                  BASE='{"policyText":"{\"Statement\":[]}"}'
                else
                  BASE=$CURRENT_POLICY
                fi

                TARGET_EXISTS=$( echo $BASE | jq -cr .policyText  |jq --arg account $ARN_STRING '.Statement[] | select( .Principal.AWS == $account )' 2>/dev/null || echo "")
                if [ -n "$TARGET_EXISTS" ] ; then
                  # TODO Overwrite the actions
                  echo "policy already exists for account=$TARGET_ACCOUNT at $repo" 1>&2
                  continue
                fi
                POLICY_TEXT="$(echo $BASE | jq -cr .policyText | jq -c --argjson NEW $(echo $NEW_POLICY | jq -r '. | @json' ) '.Statement |= . + [$NEW]')"
                FINAL_COMPLETE=$(echo $BASE | jq --arg policy "$(echo $POLICY_TEXT | jq -r '. | @json')" '.policyText=$policy')
                aws ecr set-repository-policy --repository-name=$repo --cli-input-json "$FINAL_COMPLETE" 1>&2
                for i in {0..10}; do
                  set +e
                  local CHECK_POLICY=$( aws ecr get-repository-policy --repository-name $repo | grep -c $TARGET_ACCOUNT )
                  set -e
                  if [ $CHECK_POLICY -gt 0 ]; then
                    break
                  fi
                  sleep .1
                done
              done

workflows:
  version: 2
  build_docker_image:
    jobs:
    - ctrz:
        context: ecr
    - apply_read_permissions:
        requires:
        - ctrz
